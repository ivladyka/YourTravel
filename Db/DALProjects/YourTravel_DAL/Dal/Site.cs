
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace  VikkiSoft_BLL.DAL
{
	public abstract class _Site : SqlClientEntity
	{
		public _Site()
		{
			this.QuerySource = "Site";
			this.MappingName = "Site";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllSite]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int SiteID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.SiteID, SiteID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadSiteByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter SiteID
			{
				get
				{
					return new SqlParameter("@SiteID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SiteTypeID
			{
				get
				{
					return new SqlParameter("@SiteTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter URL
			{
				get
				{
					return new SqlParameter("@URL", SqlDbType.VarChar, 500);
				}
			}
			
			public static SqlParameter Active
			{
				get
				{
					return new SqlParameter("@Active", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter OrderIndex
			{
				get
				{
					return new SqlParameter("@OrderIndex", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Notes
			{
				get
				{
					return new SqlParameter("@Notes", SqlDbType.VarChar, 2000);
				}
			}
			
			public static SqlParameter Logo
			{
				get
				{
					return new SqlParameter("@Logo", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Banner
			{
				get
				{
					return new SqlParameter("@Banner", SqlDbType.VarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string SiteID = "SiteID";
            public const string SiteTypeID = "SiteTypeID";
            public const string Name = "Name";
            public const string URL = "URL";
            public const string Active = "Active";
            public const string OrderIndex = "OrderIndex";
            public const string Notes = "Notes";
            public const string Logo = "Logo";
            public const string Banner = "Banner";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SiteID] = _Site.PropertyNames.SiteID;
					ht[SiteTypeID] = _Site.PropertyNames.SiteTypeID;
					ht[Name] = _Site.PropertyNames.Name;
					ht[URL] = _Site.PropertyNames.URL;
					ht[Active] = _Site.PropertyNames.Active;
					ht[OrderIndex] = _Site.PropertyNames.OrderIndex;
					ht[Notes] = _Site.PropertyNames.Notes;
					ht[Logo] = _Site.PropertyNames.Logo;
					ht[Banner] = _Site.PropertyNames.Banner;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string SiteID = "SiteID";
            public const string SiteTypeID = "SiteTypeID";
            public const string Name = "Name";
            public const string URL = "URL";
            public const string Active = "Active";
            public const string OrderIndex = "OrderIndex";
            public const string Notes = "Notes";
            public const string Logo = "Logo";
            public const string Banner = "Banner";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SiteID] = _Site.ColumnNames.SiteID;
					ht[SiteTypeID] = _Site.ColumnNames.SiteTypeID;
					ht[Name] = _Site.ColumnNames.Name;
					ht[URL] = _Site.ColumnNames.URL;
					ht[Active] = _Site.ColumnNames.Active;
					ht[OrderIndex] = _Site.ColumnNames.OrderIndex;
					ht[Notes] = _Site.ColumnNames.Notes;
					ht[Logo] = _Site.ColumnNames.Logo;
					ht[Banner] = _Site.ColumnNames.Banner;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string SiteID = "s_SiteID";
            public const string SiteTypeID = "s_SiteTypeID";
            public const string Name = "s_Name";
            public const string URL = "s_URL";
            public const string Active = "s_Active";
            public const string OrderIndex = "s_OrderIndex";
            public const string Notes = "s_Notes";
            public const string Logo = "s_Logo";
            public const string Banner = "s_Banner";

		}
		#endregion		
		
		#region Properties
	
		public virtual int SiteID
	    {
			get
	        {
				return base.Getint(ColumnNames.SiteID);
			}
			set
	        {
				base.Setint(ColumnNames.SiteID, value);
			}
		}

		public virtual int SiteTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.SiteTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.SiteTypeID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string URL
	    {
			get
	        {
				return base.Getstring(ColumnNames.URL);
			}
			set
	        {
				base.Setstring(ColumnNames.URL, value);
			}
		}

		public virtual bool Active
	    {
			get
	        {
				return base.Getbool(ColumnNames.Active);
			}
			set
	        {
				base.Setbool(ColumnNames.Active, value);
			}
		}

		public virtual int OrderIndex
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderIndex);
			}
			set
	        {
				base.Setint(ColumnNames.OrderIndex, value);
			}
		}

		public virtual string Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Notes, value);
			}
		}

		public virtual string Logo
	    {
			get
	        {
				return base.Getstring(ColumnNames.Logo);
			}
			set
	        {
				base.Setstring(ColumnNames.Logo, value);
			}
		}

		public virtual string Banner
	    {
			get
	        {
				return base.Getstring(ColumnNames.Banner);
			}
			set
	        {
				base.Setstring(ColumnNames.Banner, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_SiteID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SiteID) ? string.Empty : base.GetintAsString(ColumnNames.SiteID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SiteID);
				else
					this.SiteID = base.SetintAsString(ColumnNames.SiteID, value);
			}
		}

		public virtual string s_SiteTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SiteTypeID) ? string.Empty : base.GetintAsString(ColumnNames.SiteTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SiteTypeID);
				else
					this.SiteTypeID = base.SetintAsString(ColumnNames.SiteTypeID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_URL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.URL) ? string.Empty : base.GetstringAsString(ColumnNames.URL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.URL);
				else
					this.URL = base.SetstringAsString(ColumnNames.URL, value);
			}
		}

		public virtual string s_Active
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Active) ? string.Empty : base.GetboolAsString(ColumnNames.Active);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Active);
				else
					this.Active = base.SetboolAsString(ColumnNames.Active, value);
			}
		}

		public virtual string s_OrderIndex
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderIndex) ? string.Empty : base.GetintAsString(ColumnNames.OrderIndex);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderIndex);
				else
					this.OrderIndex = base.SetintAsString(ColumnNames.OrderIndex, value);
			}
		}

		public virtual string s_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Notes);
				else
					this.Notes = base.SetstringAsString(ColumnNames.Notes, value);
			}
		}

		public virtual string s_Logo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Logo) ? string.Empty : base.GetstringAsString(ColumnNames.Logo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Logo);
				else
					this.Logo = base.SetstringAsString(ColumnNames.Logo, value);
			}
		}

		public virtual string s_Banner
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Banner) ? string.Empty : base.GetstringAsString(ColumnNames.Banner);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Banner);
				else
					this.Banner = base.SetstringAsString(ColumnNames.Banner, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter SiteID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SiteID, Parameters.SiteID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SiteTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SiteTypeID, Parameters.SiteTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter URL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.URL, Parameters.URL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Active
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Active, Parameters.Active);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderIndex
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderIndex, Parameters.OrderIndex);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Logo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Logo, Parameters.Logo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Banner
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Banner, Parameters.Banner);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter SiteID
		    {
				get
		        {
					if(_SiteID_W == null)
	        	    {
						_SiteID_W = TearOff.SiteID;
					}
					return _SiteID_W;
				}
			}

			public WhereParameter SiteTypeID
		    {
				get
		        {
					if(_SiteTypeID_W == null)
	        	    {
						_SiteTypeID_W = TearOff.SiteTypeID;
					}
					return _SiteTypeID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter URL
		    {
				get
		        {
					if(_URL_W == null)
	        	    {
						_URL_W = TearOff.URL;
					}
					return _URL_W;
				}
			}

			public WhereParameter Active
		    {
				get
		        {
					if(_Active_W == null)
	        	    {
						_Active_W = TearOff.Active;
					}
					return _Active_W;
				}
			}

			public WhereParameter OrderIndex
		    {
				get
		        {
					if(_OrderIndex_W == null)
	        	    {
						_OrderIndex_W = TearOff.OrderIndex;
					}
					return _OrderIndex_W;
				}
			}

			public WhereParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public WhereParameter Logo
		    {
				get
		        {
					if(_Logo_W == null)
	        	    {
						_Logo_W = TearOff.Logo;
					}
					return _Logo_W;
				}
			}

			public WhereParameter Banner
		    {
				get
		        {
					if(_Banner_W == null)
	        	    {
						_Banner_W = TearOff.Banner;
					}
					return _Banner_W;
				}
			}

			private WhereParameter _SiteID_W = null;
			private WhereParameter _SiteTypeID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _URL_W = null;
			private WhereParameter _Active_W = null;
			private WhereParameter _OrderIndex_W = null;
			private WhereParameter _Notes_W = null;
			private WhereParameter _Logo_W = null;
			private WhereParameter _Banner_W = null;

			public void WhereClauseReset()
			{
				_SiteID_W = null;
				_SiteTypeID_W = null;
				_Name_W = null;
				_URL_W = null;
				_Active_W = null;
				_OrderIndex_W = null;
				_Notes_W = null;
				_Logo_W = null;
				_Banner_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter SiteID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SiteID, Parameters.SiteID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SiteTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SiteTypeID, Parameters.SiteTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter URL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.URL, Parameters.URL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Active
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Active, Parameters.Active);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderIndex
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderIndex, Parameters.OrderIndex);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Logo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Logo, Parameters.Logo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Banner
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Banner, Parameters.Banner);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter SiteID
		    {
				get
		        {
					if(_SiteID_W == null)
	        	    {
						_SiteID_W = TearOff.SiteID;
					}
					return _SiteID_W;
				}
			}

			public AggregateParameter SiteTypeID
		    {
				get
		        {
					if(_SiteTypeID_W == null)
	        	    {
						_SiteTypeID_W = TearOff.SiteTypeID;
					}
					return _SiteTypeID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter URL
		    {
				get
		        {
					if(_URL_W == null)
	        	    {
						_URL_W = TearOff.URL;
					}
					return _URL_W;
				}
			}

			public AggregateParameter Active
		    {
				get
		        {
					if(_Active_W == null)
	        	    {
						_Active_W = TearOff.Active;
					}
					return _Active_W;
				}
			}

			public AggregateParameter OrderIndex
		    {
				get
		        {
					if(_OrderIndex_W == null)
	        	    {
						_OrderIndex_W = TearOff.OrderIndex;
					}
					return _OrderIndex_W;
				}
			}

			public AggregateParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public AggregateParameter Logo
		    {
				get
		        {
					if(_Logo_W == null)
	        	    {
						_Logo_W = TearOff.Logo;
					}
					return _Logo_W;
				}
			}

			public AggregateParameter Banner
		    {
				get
		        {
					if(_Banner_W == null)
	        	    {
						_Banner_W = TearOff.Banner;
					}
					return _Banner_W;
				}
			}

			private AggregateParameter _SiteID_W = null;
			private AggregateParameter _SiteTypeID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _URL_W = null;
			private AggregateParameter _Active_W = null;
			private AggregateParameter _OrderIndex_W = null;
			private AggregateParameter _Notes_W = null;
			private AggregateParameter _Logo_W = null;
			private AggregateParameter _Banner_W = null;

			public void AggregateClauseReset()
			{
				_SiteID_W = null;
				_SiteTypeID_W = null;
				_Name_W = null;
				_URL_W = null;
				_Active_W = null;
				_OrderIndex_W = null;
				_Notes_W = null;
				_Logo_W = null;
				_Banner_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertSite]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.SiteID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateSite]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteSite]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.SiteID);
			p.SourceColumn = ColumnNames.SiteID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.SiteID);
			p.SourceColumn = ColumnNames.SiteID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SiteTypeID);
			p.SourceColumn = ColumnNames.SiteTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.URL);
			p.SourceColumn = ColumnNames.URL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Active);
			p.SourceColumn = ColumnNames.Active;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderIndex);
			p.SourceColumn = ColumnNames.OrderIndex;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Notes);
			p.SourceColumn = ColumnNames.Notes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Logo);
			p.SourceColumn = ColumnNames.Logo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Banner);
			p.SourceColumn = ColumnNames.Banner;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
