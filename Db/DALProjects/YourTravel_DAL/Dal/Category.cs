
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace VikkiSoft_BLL.DAL
{
	public abstract class _Category : SqlClientEntity
	{
		public _Category()
		{
			this.QuerySource = "Category";
			this.MappingName = "Category";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllCategory]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int CategoryID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.CategoryID, CategoryID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadCategoryByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CategoryID
			{
				get
				{
					return new SqlParameter("@CategoryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name_uk
			{
				get
				{
					return new SqlParameter("@Name_uk", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter Name_en
			{
				get
				{
					return new SqlParameter("@Name_en", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter Name_ru
			{
				get
				{
					return new SqlParameter("@Name_ru", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter CategoryContent_uk
			{
				get
				{
					return new SqlParameter("@CategoryContent_uk", SqlDbType.VarChar, 2147483647);
				}
			}
			
			public static SqlParameter CategoryContent_en
			{
				get
				{
					return new SqlParameter("@CategoryContent_en", SqlDbType.VarChar, 2147483647);
				}
			}
			
			public static SqlParameter CategoryContent_ru
			{
				get
				{
					return new SqlParameter("@CategoryContent_ru", SqlDbType.VarChar, 2147483647);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CategoryID = "CategoryID";
            public const string Name_uk = "Name_uk";
            public const string Name_en = "Name_en";
            public const string Name_ru = "Name_ru";
            public const string CategoryContent_uk = "CategoryContent_uk";
            public const string CategoryContent_en = "CategoryContent_en";
            public const string CategoryContent_ru = "CategoryContent_ru";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CategoryID] = _Category.PropertyNames.CategoryID;
					ht[Name_uk] = _Category.PropertyNames.Name_uk;
					ht[Name_en] = _Category.PropertyNames.Name_en;
					ht[Name_ru] = _Category.PropertyNames.Name_ru;
					ht[CategoryContent_uk] = _Category.PropertyNames.CategoryContent_uk;
					ht[CategoryContent_en] = _Category.PropertyNames.CategoryContent_en;
					ht[CategoryContent_ru] = _Category.PropertyNames.CategoryContent_ru;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CategoryID = "CategoryID";
            public const string Name_uk = "Name_uk";
            public const string Name_en = "Name_en";
            public const string Name_ru = "Name_ru";
            public const string CategoryContent_uk = "CategoryContent_uk";
            public const string CategoryContent_en = "CategoryContent_en";
            public const string CategoryContent_ru = "CategoryContent_ru";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CategoryID] = _Category.ColumnNames.CategoryID;
					ht[Name_uk] = _Category.ColumnNames.Name_uk;
					ht[Name_en] = _Category.ColumnNames.Name_en;
					ht[Name_ru] = _Category.ColumnNames.Name_ru;
					ht[CategoryContent_uk] = _Category.ColumnNames.CategoryContent_uk;
					ht[CategoryContent_en] = _Category.ColumnNames.CategoryContent_en;
					ht[CategoryContent_ru] = _Category.ColumnNames.CategoryContent_ru;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CategoryID = "s_CategoryID";
            public const string Name_uk = "s_Name_uk";
            public const string Name_en = "s_Name_en";
            public const string Name_ru = "s_Name_ru";
            public const string CategoryContent_uk = "s_CategoryContent_uk";
            public const string CategoryContent_en = "s_CategoryContent_en";
            public const string CategoryContent_ru = "s_CategoryContent_ru";

		}
		#endregion		
		
		#region Properties
	
		public virtual int CategoryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CategoryID);
			}
			set
	        {
				base.Setint(ColumnNames.CategoryID, value);
			}
		}

		public virtual string Name_uk
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name_uk);
			}
			set
	        {
				base.Setstring(ColumnNames.Name_uk, value);
			}
		}

		public virtual string Name_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name_en);
			}
			set
	        {
				base.Setstring(ColumnNames.Name_en, value);
			}
		}

		public virtual string Name_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.Name_ru, value);
			}
		}

		public virtual string CategoryContent_uk
	    {
			get
	        {
				return base.Getstring(ColumnNames.CategoryContent_uk);
			}
			set
	        {
				base.Setstring(ColumnNames.CategoryContent_uk, value);
			}
		}

		public virtual string CategoryContent_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.CategoryContent_en);
			}
			set
	        {
				base.Setstring(ColumnNames.CategoryContent_en, value);
			}
		}

		public virtual string CategoryContent_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.CategoryContent_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.CategoryContent_ru, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CategoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CategoryID) ? string.Empty : base.GetintAsString(ColumnNames.CategoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CategoryID);
				else
					this.CategoryID = base.SetintAsString(ColumnNames.CategoryID, value);
			}
		}

		public virtual string s_Name_uk
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name_uk) ? string.Empty : base.GetstringAsString(ColumnNames.Name_uk);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name_uk);
				else
					this.Name_uk = base.SetstringAsString(ColumnNames.Name_uk, value);
			}
		}

		public virtual string s_Name_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name_en) ? string.Empty : base.GetstringAsString(ColumnNames.Name_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name_en);
				else
					this.Name_en = base.SetstringAsString(ColumnNames.Name_en, value);
			}
		}

		public virtual string s_Name_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name_ru) ? string.Empty : base.GetstringAsString(ColumnNames.Name_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name_ru);
				else
					this.Name_ru = base.SetstringAsString(ColumnNames.Name_ru, value);
			}
		}

		public virtual string s_CategoryContent_uk
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CategoryContent_uk) ? string.Empty : base.GetstringAsString(ColumnNames.CategoryContent_uk);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CategoryContent_uk);
				else
					this.CategoryContent_uk = base.SetstringAsString(ColumnNames.CategoryContent_uk, value);
			}
		}

		public virtual string s_CategoryContent_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CategoryContent_en) ? string.Empty : base.GetstringAsString(ColumnNames.CategoryContent_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CategoryContent_en);
				else
					this.CategoryContent_en = base.SetstringAsString(ColumnNames.CategoryContent_en, value);
			}
		}

		public virtual string s_CategoryContent_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CategoryContent_ru) ? string.Empty : base.GetstringAsString(ColumnNames.CategoryContent_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CategoryContent_ru);
				else
					this.CategoryContent_ru = base.SetstringAsString(ColumnNames.CategoryContent_ru, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CategoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CategoryID, Parameters.CategoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name_uk
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name_uk, Parameters.Name_uk);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name_en, Parameters.Name_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name_ru, Parameters.Name_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CategoryContent_uk
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CategoryContent_uk, Parameters.CategoryContent_uk);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CategoryContent_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CategoryContent_en, Parameters.CategoryContent_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CategoryContent_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CategoryContent_ru, Parameters.CategoryContent_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CategoryID
		    {
				get
		        {
					if(_CategoryID_W == null)
	        	    {
						_CategoryID_W = TearOff.CategoryID;
					}
					return _CategoryID_W;
				}
			}

			public WhereParameter Name_uk
		    {
				get
		        {
					if(_Name_uk_W == null)
	        	    {
						_Name_uk_W = TearOff.Name_uk;
					}
					return _Name_uk_W;
				}
			}

			public WhereParameter Name_en
		    {
				get
		        {
					if(_Name_en_W == null)
	        	    {
						_Name_en_W = TearOff.Name_en;
					}
					return _Name_en_W;
				}
			}

			public WhereParameter Name_ru
		    {
				get
		        {
					if(_Name_ru_W == null)
	        	    {
						_Name_ru_W = TearOff.Name_ru;
					}
					return _Name_ru_W;
				}
			}

			public WhereParameter CategoryContent_uk
		    {
				get
		        {
					if(_CategoryContent_uk_W == null)
	        	    {
						_CategoryContent_uk_W = TearOff.CategoryContent_uk;
					}
					return _CategoryContent_uk_W;
				}
			}

			public WhereParameter CategoryContent_en
		    {
				get
		        {
					if(_CategoryContent_en_W == null)
	        	    {
						_CategoryContent_en_W = TearOff.CategoryContent_en;
					}
					return _CategoryContent_en_W;
				}
			}

			public WhereParameter CategoryContent_ru
		    {
				get
		        {
					if(_CategoryContent_ru_W == null)
	        	    {
						_CategoryContent_ru_W = TearOff.CategoryContent_ru;
					}
					return _CategoryContent_ru_W;
				}
			}

			private WhereParameter _CategoryID_W = null;
			private WhereParameter _Name_uk_W = null;
			private WhereParameter _Name_en_W = null;
			private WhereParameter _Name_ru_W = null;
			private WhereParameter _CategoryContent_uk_W = null;
			private WhereParameter _CategoryContent_en_W = null;
			private WhereParameter _CategoryContent_ru_W = null;

			public void WhereClauseReset()
			{
				_CategoryID_W = null;
				_Name_uk_W = null;
				_Name_en_W = null;
				_Name_ru_W = null;
				_CategoryContent_uk_W = null;
				_CategoryContent_en_W = null;
				_CategoryContent_ru_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CategoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CategoryID, Parameters.CategoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name_uk
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name_uk, Parameters.Name_uk);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name_en, Parameters.Name_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name_ru, Parameters.Name_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CategoryContent_uk
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CategoryContent_uk, Parameters.CategoryContent_uk);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CategoryContent_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CategoryContent_en, Parameters.CategoryContent_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CategoryContent_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CategoryContent_ru, Parameters.CategoryContent_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CategoryID
		    {
				get
		        {
					if(_CategoryID_W == null)
	        	    {
						_CategoryID_W = TearOff.CategoryID;
					}
					return _CategoryID_W;
				}
			}

			public AggregateParameter Name_uk
		    {
				get
		        {
					if(_Name_uk_W == null)
	        	    {
						_Name_uk_W = TearOff.Name_uk;
					}
					return _Name_uk_W;
				}
			}

			public AggregateParameter Name_en
		    {
				get
		        {
					if(_Name_en_W == null)
	        	    {
						_Name_en_W = TearOff.Name_en;
					}
					return _Name_en_W;
				}
			}

			public AggregateParameter Name_ru
		    {
				get
		        {
					if(_Name_ru_W == null)
	        	    {
						_Name_ru_W = TearOff.Name_ru;
					}
					return _Name_ru_W;
				}
			}

			public AggregateParameter CategoryContent_uk
		    {
				get
		        {
					if(_CategoryContent_uk_W == null)
	        	    {
						_CategoryContent_uk_W = TearOff.CategoryContent_uk;
					}
					return _CategoryContent_uk_W;
				}
			}

			public AggregateParameter CategoryContent_en
		    {
				get
		        {
					if(_CategoryContent_en_W == null)
	        	    {
						_CategoryContent_en_W = TearOff.CategoryContent_en;
					}
					return _CategoryContent_en_W;
				}
			}

			public AggregateParameter CategoryContent_ru
		    {
				get
		        {
					if(_CategoryContent_ru_W == null)
	        	    {
						_CategoryContent_ru_W = TearOff.CategoryContent_ru;
					}
					return _CategoryContent_ru_W;
				}
			}

			private AggregateParameter _CategoryID_W = null;
			private AggregateParameter _Name_uk_W = null;
			private AggregateParameter _Name_en_W = null;
			private AggregateParameter _Name_ru_W = null;
			private AggregateParameter _CategoryContent_uk_W = null;
			private AggregateParameter _CategoryContent_en_W = null;
			private AggregateParameter _CategoryContent_ru_W = null;

			public void AggregateClauseReset()
			{
				_CategoryID_W = null;
				_Name_uk_W = null;
				_Name_en_W = null;
				_Name_ru_W = null;
				_CategoryContent_uk_W = null;
				_CategoryContent_en_W = null;
				_CategoryContent_ru_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertCategory]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.CategoryID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateCategory]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteCategory]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.CategoryID);
			p.SourceColumn = ColumnNames.CategoryID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.CategoryID);
			p.SourceColumn = ColumnNames.CategoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name_uk);
			p.SourceColumn = ColumnNames.Name_uk;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name_en);
			p.SourceColumn = ColumnNames.Name_en;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name_ru);
			p.SourceColumn = ColumnNames.Name_ru;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CategoryContent_uk);
			p.SourceColumn = ColumnNames.CategoryContent_uk;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CategoryContent_en);
			p.SourceColumn = ColumnNames.CategoryContent_en;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CategoryContent_ru);
			p.SourceColumn = ColumnNames.CategoryContent_ru;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
