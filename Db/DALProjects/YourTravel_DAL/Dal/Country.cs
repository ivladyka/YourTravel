
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace VikkiSoft_BLL.DAL
{
	public abstract class _Country : SqlClientEntity
	{
		public _Country()
		{
			this.QuerySource = "Country";
			this.MappingName = "Country";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllCountry]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int CountryID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.CountryID, CountryID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadCountryByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CountryID
			{
				get
				{
					return new SqlParameter("@CountryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name_uk
			{
				get
				{
					return new SqlParameter("@Name_uk", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Name_en
			{
				get
				{
					return new SqlParameter("@Name_en", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Name_ru
			{
				get
				{
					return new SqlParameter("@Name_ru", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Content_uk
			{
				get
				{
					return new SqlParameter("@Content_uk", SqlDbType.VarChar, 2147483647);
				}
			}
			
			public static SqlParameter Content_en
			{
				get
				{
					return new SqlParameter("@Content_en", SqlDbType.VarChar, 2147483647);
				}
			}
			
			public static SqlParameter Content_ru
			{
				get
				{
					return new SqlParameter("@Content_ru", SqlDbType.VarChar, 2147483647);
				}
			}
			
			public static SqlParameter Area
			{
				get
				{
					return new SqlParameter("@Area", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Population
			{
				get
				{
					return new SqlParameter("@Population", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CurrencyCode
			{
				get
				{
					return new SqlParameter("@CurrencyCode", SqlDbType.VarChar, 3);
				}
			}
			
			public static SqlParameter CurrencyName_uk
			{
				get
				{
					return new SqlParameter("@CurrencyName_uk", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter CurrencyName_en
			{
				get
				{
					return new SqlParameter("@CurrencyName_en", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter CurrencyName_ru
			{
				get
				{
					return new SqlParameter("@CurrencyName_ru", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Keywords_uk
			{
				get
				{
					return new SqlParameter("@Keywords_uk", SqlDbType.VarChar, 250);
				}
			}
			
			public static SqlParameter Keywords_en
			{
				get
				{
					return new SqlParameter("@Keywords_en", SqlDbType.VarChar, 250);
				}
			}
			
			public static SqlParameter Keywords_ru
			{
				get
				{
					return new SqlParameter("@Keywords_ru", SqlDbType.VarChar, 250);
				}
			}
			
			public static SqlParameter Active
			{
				get
				{
					return new SqlParameter("@Active", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter CapitalID
			{
				get
				{
					return new SqlParameter("@CapitalID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Description_uk
			{
				get
				{
					return new SqlParameter("@Description_uk", SqlDbType.VarChar, 200);
				}
			}
			
			public static SqlParameter Description_en
			{
				get
				{
					return new SqlParameter("@Description_en", SqlDbType.VarChar, 200);
				}
			}
			
			public static SqlParameter Description_ru
			{
				get
				{
					return new SqlParameter("@Description_ru", SqlDbType.VarChar, 200);
				}
			}
			
			public static SqlParameter DateUpdate
			{
				get
				{
					return new SqlParameter("@DateUpdate", SqlDbType.SmallDateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CountryID = "CountryID";
            public const string Name_uk = "Name_uk";
            public const string Name_en = "Name_en";
            public const string Name_ru = "Name_ru";
            public const string Content_uk = "Content_uk";
            public const string Content_en = "Content_en";
            public const string Content_ru = "Content_ru";
            public const string Area = "Area";
            public const string Population = "Population";
            public const string CurrencyCode = "CurrencyCode";
            public const string CurrencyName_uk = "CurrencyName_uk";
            public const string CurrencyName_en = "CurrencyName_en";
            public const string CurrencyName_ru = "CurrencyName_ru";
            public const string Keywords_uk = "Keywords_uk";
            public const string Keywords_en = "Keywords_en";
            public const string Keywords_ru = "Keywords_ru";
            public const string Active = "Active";
            public const string CapitalID = "CapitalID";
            public const string Description_uk = "Description_uk";
            public const string Description_en = "Description_en";
            public const string Description_ru = "Description_ru";
            public const string DateUpdate = "DateUpdate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CountryID] = _Country.PropertyNames.CountryID;
					ht[Name_uk] = _Country.PropertyNames.Name_uk;
					ht[Name_en] = _Country.PropertyNames.Name_en;
					ht[Name_ru] = _Country.PropertyNames.Name_ru;
					ht[Content_uk] = _Country.PropertyNames.Content_uk;
					ht[Content_en] = _Country.PropertyNames.Content_en;
					ht[Content_ru] = _Country.PropertyNames.Content_ru;
					ht[Area] = _Country.PropertyNames.Area;
					ht[Population] = _Country.PropertyNames.Population;
					ht[CurrencyCode] = _Country.PropertyNames.CurrencyCode;
					ht[CurrencyName_uk] = _Country.PropertyNames.CurrencyName_uk;
					ht[CurrencyName_en] = _Country.PropertyNames.CurrencyName_en;
					ht[CurrencyName_ru] = _Country.PropertyNames.CurrencyName_ru;
					ht[Keywords_uk] = _Country.PropertyNames.Keywords_uk;
					ht[Keywords_en] = _Country.PropertyNames.Keywords_en;
					ht[Keywords_ru] = _Country.PropertyNames.Keywords_ru;
					ht[Active] = _Country.PropertyNames.Active;
					ht[CapitalID] = _Country.PropertyNames.CapitalID;
					ht[Description_uk] = _Country.PropertyNames.Description_uk;
					ht[Description_en] = _Country.PropertyNames.Description_en;
					ht[Description_ru] = _Country.PropertyNames.Description_ru;
					ht[DateUpdate] = _Country.PropertyNames.DateUpdate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CountryID = "CountryID";
            public const string Name_uk = "Name_uk";
            public const string Name_en = "Name_en";
            public const string Name_ru = "Name_ru";
            public const string Content_uk = "Content_uk";
            public const string Content_en = "Content_en";
            public const string Content_ru = "Content_ru";
            public const string Area = "Area";
            public const string Population = "Population";
            public const string CurrencyCode = "CurrencyCode";
            public const string CurrencyName_uk = "CurrencyName_uk";
            public const string CurrencyName_en = "CurrencyName_en";
            public const string CurrencyName_ru = "CurrencyName_ru";
            public const string Keywords_uk = "Keywords_uk";
            public const string Keywords_en = "Keywords_en";
            public const string Keywords_ru = "Keywords_ru";
            public const string Active = "Active";
            public const string CapitalID = "CapitalID";
            public const string Description_uk = "Description_uk";
            public const string Description_en = "Description_en";
            public const string Description_ru = "Description_ru";
            public const string DateUpdate = "DateUpdate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CountryID] = _Country.ColumnNames.CountryID;
					ht[Name_uk] = _Country.ColumnNames.Name_uk;
					ht[Name_en] = _Country.ColumnNames.Name_en;
					ht[Name_ru] = _Country.ColumnNames.Name_ru;
					ht[Content_uk] = _Country.ColumnNames.Content_uk;
					ht[Content_en] = _Country.ColumnNames.Content_en;
					ht[Content_ru] = _Country.ColumnNames.Content_ru;
					ht[Area] = _Country.ColumnNames.Area;
					ht[Population] = _Country.ColumnNames.Population;
					ht[CurrencyCode] = _Country.ColumnNames.CurrencyCode;
					ht[CurrencyName_uk] = _Country.ColumnNames.CurrencyName_uk;
					ht[CurrencyName_en] = _Country.ColumnNames.CurrencyName_en;
					ht[CurrencyName_ru] = _Country.ColumnNames.CurrencyName_ru;
					ht[Keywords_uk] = _Country.ColumnNames.Keywords_uk;
					ht[Keywords_en] = _Country.ColumnNames.Keywords_en;
					ht[Keywords_ru] = _Country.ColumnNames.Keywords_ru;
					ht[Active] = _Country.ColumnNames.Active;
					ht[CapitalID] = _Country.ColumnNames.CapitalID;
					ht[Description_uk] = _Country.ColumnNames.Description_uk;
					ht[Description_en] = _Country.ColumnNames.Description_en;
					ht[Description_ru] = _Country.ColumnNames.Description_ru;
					ht[DateUpdate] = _Country.ColumnNames.DateUpdate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CountryID = "s_CountryID";
            public const string Name_uk = "s_Name_uk";
            public const string Name_en = "s_Name_en";
            public const string Name_ru = "s_Name_ru";
            public const string Content_uk = "s_Content_uk";
            public const string Content_en = "s_Content_en";
            public const string Content_ru = "s_Content_ru";
            public const string Area = "s_Area";
            public const string Population = "s_Population";
            public const string CurrencyCode = "s_CurrencyCode";
            public const string CurrencyName_uk = "s_CurrencyName_uk";
            public const string CurrencyName_en = "s_CurrencyName_en";
            public const string CurrencyName_ru = "s_CurrencyName_ru";
            public const string Keywords_uk = "s_Keywords_uk";
            public const string Keywords_en = "s_Keywords_en";
            public const string Keywords_ru = "s_Keywords_ru";
            public const string Active = "s_Active";
            public const string CapitalID = "s_CapitalID";
            public const string Description_uk = "s_Description_uk";
            public const string Description_en = "s_Description_en";
            public const string Description_ru = "s_Description_ru";
            public const string DateUpdate = "s_DateUpdate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int CountryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryID, value);
			}
		}

		public virtual string Name_uk
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name_uk);
			}
			set
	        {
				base.Setstring(ColumnNames.Name_uk, value);
			}
		}

		public virtual string Name_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name_en);
			}
			set
	        {
				base.Setstring(ColumnNames.Name_en, value);
			}
		}

		public virtual string Name_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.Name_ru, value);
			}
		}

		public virtual string Content_uk
	    {
			get
	        {
				return base.Getstring(ColumnNames.Content_uk);
			}
			set
	        {
				base.Setstring(ColumnNames.Content_uk, value);
			}
		}

		public virtual string Content_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.Content_en);
			}
			set
	        {
				base.Setstring(ColumnNames.Content_en, value);
			}
		}

		public virtual string Content_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.Content_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.Content_ru, value);
			}
		}

		public virtual int Area
	    {
			get
	        {
				return base.Getint(ColumnNames.Area);
			}
			set
	        {
				base.Setint(ColumnNames.Area, value);
			}
		}

		public virtual int Population
	    {
			get
	        {
				return base.Getint(ColumnNames.Population);
			}
			set
	        {
				base.Setint(ColumnNames.Population, value);
			}
		}

		public virtual string CurrencyCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.CurrencyCode);
			}
			set
	        {
				base.Setstring(ColumnNames.CurrencyCode, value);
			}
		}

		public virtual string CurrencyName_uk
	    {
			get
	        {
				return base.Getstring(ColumnNames.CurrencyName_uk);
			}
			set
	        {
				base.Setstring(ColumnNames.CurrencyName_uk, value);
			}
		}

		public virtual string CurrencyName_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.CurrencyName_en);
			}
			set
	        {
				base.Setstring(ColumnNames.CurrencyName_en, value);
			}
		}

		public virtual string CurrencyName_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.CurrencyName_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.CurrencyName_ru, value);
			}
		}

		public virtual string Keywords_uk
	    {
			get
	        {
				return base.Getstring(ColumnNames.Keywords_uk);
			}
			set
	        {
				base.Setstring(ColumnNames.Keywords_uk, value);
			}
		}

		public virtual string Keywords_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.Keywords_en);
			}
			set
	        {
				base.Setstring(ColumnNames.Keywords_en, value);
			}
		}

		public virtual string Keywords_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.Keywords_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.Keywords_ru, value);
			}
		}

		public virtual bool Active
	    {
			get
	        {
				return base.Getbool(ColumnNames.Active);
			}
			set
	        {
				base.Setbool(ColumnNames.Active, value);
			}
		}

		public virtual int CapitalID
	    {
			get
	        {
				return base.Getint(ColumnNames.CapitalID);
			}
			set
	        {
				base.Setint(ColumnNames.CapitalID, value);
			}
		}

		public virtual string Description_uk
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description_uk);
			}
			set
	        {
				base.Setstring(ColumnNames.Description_uk, value);
			}
		}

		public virtual string Description_en
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description_en);
			}
			set
	        {
				base.Setstring(ColumnNames.Description_en, value);
			}
		}

		public virtual string Description_ru
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description_ru);
			}
			set
	        {
				base.Setstring(ColumnNames.Description_ru, value);
			}
		}

		public virtual DateTime DateUpdate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateUpdate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateUpdate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CountryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryID) ? string.Empty : base.GetintAsString(ColumnNames.CountryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryID);
				else
					this.CountryID = base.SetintAsString(ColumnNames.CountryID, value);
			}
		}

		public virtual string s_Name_uk
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name_uk) ? string.Empty : base.GetstringAsString(ColumnNames.Name_uk);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name_uk);
				else
					this.Name_uk = base.SetstringAsString(ColumnNames.Name_uk, value);
			}
		}

		public virtual string s_Name_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name_en) ? string.Empty : base.GetstringAsString(ColumnNames.Name_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name_en);
				else
					this.Name_en = base.SetstringAsString(ColumnNames.Name_en, value);
			}
		}

		public virtual string s_Name_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name_ru) ? string.Empty : base.GetstringAsString(ColumnNames.Name_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name_ru);
				else
					this.Name_ru = base.SetstringAsString(ColumnNames.Name_ru, value);
			}
		}

		public virtual string s_Content_uk
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Content_uk) ? string.Empty : base.GetstringAsString(ColumnNames.Content_uk);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Content_uk);
				else
					this.Content_uk = base.SetstringAsString(ColumnNames.Content_uk, value);
			}
		}

		public virtual string s_Content_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Content_en) ? string.Empty : base.GetstringAsString(ColumnNames.Content_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Content_en);
				else
					this.Content_en = base.SetstringAsString(ColumnNames.Content_en, value);
			}
		}

		public virtual string s_Content_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Content_ru) ? string.Empty : base.GetstringAsString(ColumnNames.Content_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Content_ru);
				else
					this.Content_ru = base.SetstringAsString(ColumnNames.Content_ru, value);
			}
		}

		public virtual string s_Area
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Area) ? string.Empty : base.GetintAsString(ColumnNames.Area);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Area);
				else
					this.Area = base.SetintAsString(ColumnNames.Area, value);
			}
		}

		public virtual string s_Population
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Population) ? string.Empty : base.GetintAsString(ColumnNames.Population);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Population);
				else
					this.Population = base.SetintAsString(ColumnNames.Population, value);
			}
		}

		public virtual string s_CurrencyCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrencyCode) ? string.Empty : base.GetstringAsString(ColumnNames.CurrencyCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrencyCode);
				else
					this.CurrencyCode = base.SetstringAsString(ColumnNames.CurrencyCode, value);
			}
		}

		public virtual string s_CurrencyName_uk
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrencyName_uk) ? string.Empty : base.GetstringAsString(ColumnNames.CurrencyName_uk);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrencyName_uk);
				else
					this.CurrencyName_uk = base.SetstringAsString(ColumnNames.CurrencyName_uk, value);
			}
		}

		public virtual string s_CurrencyName_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrencyName_en) ? string.Empty : base.GetstringAsString(ColumnNames.CurrencyName_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrencyName_en);
				else
					this.CurrencyName_en = base.SetstringAsString(ColumnNames.CurrencyName_en, value);
			}
		}

		public virtual string s_CurrencyName_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrencyName_ru) ? string.Empty : base.GetstringAsString(ColumnNames.CurrencyName_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrencyName_ru);
				else
					this.CurrencyName_ru = base.SetstringAsString(ColumnNames.CurrencyName_ru, value);
			}
		}

		public virtual string s_Keywords_uk
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Keywords_uk) ? string.Empty : base.GetstringAsString(ColumnNames.Keywords_uk);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Keywords_uk);
				else
					this.Keywords_uk = base.SetstringAsString(ColumnNames.Keywords_uk, value);
			}
		}

		public virtual string s_Keywords_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Keywords_en) ? string.Empty : base.GetstringAsString(ColumnNames.Keywords_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Keywords_en);
				else
					this.Keywords_en = base.SetstringAsString(ColumnNames.Keywords_en, value);
			}
		}

		public virtual string s_Keywords_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Keywords_ru) ? string.Empty : base.GetstringAsString(ColumnNames.Keywords_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Keywords_ru);
				else
					this.Keywords_ru = base.SetstringAsString(ColumnNames.Keywords_ru, value);
			}
		}

		public virtual string s_Active
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Active) ? string.Empty : base.GetboolAsString(ColumnNames.Active);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Active);
				else
					this.Active = base.SetboolAsString(ColumnNames.Active, value);
			}
		}

		public virtual string s_CapitalID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CapitalID) ? string.Empty : base.GetintAsString(ColumnNames.CapitalID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CapitalID);
				else
					this.CapitalID = base.SetintAsString(ColumnNames.CapitalID, value);
			}
		}

		public virtual string s_Description_uk
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description_uk) ? string.Empty : base.GetstringAsString(ColumnNames.Description_uk);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description_uk);
				else
					this.Description_uk = base.SetstringAsString(ColumnNames.Description_uk, value);
			}
		}

		public virtual string s_Description_en
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description_en) ? string.Empty : base.GetstringAsString(ColumnNames.Description_en);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description_en);
				else
					this.Description_en = base.SetstringAsString(ColumnNames.Description_en, value);
			}
		}

		public virtual string s_Description_ru
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description_ru) ? string.Empty : base.GetstringAsString(ColumnNames.Description_ru);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description_ru);
				else
					this.Description_ru = base.SetstringAsString(ColumnNames.Description_ru, value);
			}
		}

		public virtual string s_DateUpdate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateUpdate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateUpdate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateUpdate);
				else
					this.DateUpdate = base.SetDateTimeAsString(ColumnNames.DateUpdate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CountryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name_uk
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name_uk, Parameters.Name_uk);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name_en, Parameters.Name_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name_ru, Parameters.Name_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Content_uk
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Content_uk, Parameters.Content_uk);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Content_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Content_en, Parameters.Content_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Content_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Content_ru, Parameters.Content_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Area
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Area, Parameters.Area);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Population
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Population, Parameters.Population);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrencyCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrencyCode, Parameters.CurrencyCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrencyName_uk
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrencyName_uk, Parameters.CurrencyName_uk);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrencyName_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrencyName_en, Parameters.CurrencyName_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrencyName_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrencyName_ru, Parameters.CurrencyName_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Keywords_uk
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Keywords_uk, Parameters.Keywords_uk);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Keywords_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Keywords_en, Parameters.Keywords_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Keywords_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Keywords_ru, Parameters.Keywords_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Active
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Active, Parameters.Active);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CapitalID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CapitalID, Parameters.CapitalID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description_uk
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description_uk, Parameters.Description_uk);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description_en
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description_en, Parameters.Description_en);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description_ru
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description_ru, Parameters.Description_ru);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateUpdate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateUpdate, Parameters.DateUpdate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public WhereParameter Name_uk
		    {
				get
		        {
					if(_Name_uk_W == null)
	        	    {
						_Name_uk_W = TearOff.Name_uk;
					}
					return _Name_uk_W;
				}
			}

			public WhereParameter Name_en
		    {
				get
		        {
					if(_Name_en_W == null)
	        	    {
						_Name_en_W = TearOff.Name_en;
					}
					return _Name_en_W;
				}
			}

			public WhereParameter Name_ru
		    {
				get
		        {
					if(_Name_ru_W == null)
	        	    {
						_Name_ru_W = TearOff.Name_ru;
					}
					return _Name_ru_W;
				}
			}

			public WhereParameter Content_uk
		    {
				get
		        {
					if(_Content_uk_W == null)
	        	    {
						_Content_uk_W = TearOff.Content_uk;
					}
					return _Content_uk_W;
				}
			}

			public WhereParameter Content_en
		    {
				get
		        {
					if(_Content_en_W == null)
	        	    {
						_Content_en_W = TearOff.Content_en;
					}
					return _Content_en_W;
				}
			}

			public WhereParameter Content_ru
		    {
				get
		        {
					if(_Content_ru_W == null)
	        	    {
						_Content_ru_W = TearOff.Content_ru;
					}
					return _Content_ru_W;
				}
			}

			public WhereParameter Area
		    {
				get
		        {
					if(_Area_W == null)
	        	    {
						_Area_W = TearOff.Area;
					}
					return _Area_W;
				}
			}

			public WhereParameter Population
		    {
				get
		        {
					if(_Population_W == null)
	        	    {
						_Population_W = TearOff.Population;
					}
					return _Population_W;
				}
			}

			public WhereParameter CurrencyCode
		    {
				get
		        {
					if(_CurrencyCode_W == null)
	        	    {
						_CurrencyCode_W = TearOff.CurrencyCode;
					}
					return _CurrencyCode_W;
				}
			}

			public WhereParameter CurrencyName_uk
		    {
				get
		        {
					if(_CurrencyName_uk_W == null)
	        	    {
						_CurrencyName_uk_W = TearOff.CurrencyName_uk;
					}
					return _CurrencyName_uk_W;
				}
			}

			public WhereParameter CurrencyName_en
		    {
				get
		        {
					if(_CurrencyName_en_W == null)
	        	    {
						_CurrencyName_en_W = TearOff.CurrencyName_en;
					}
					return _CurrencyName_en_W;
				}
			}

			public WhereParameter CurrencyName_ru
		    {
				get
		        {
					if(_CurrencyName_ru_W == null)
	        	    {
						_CurrencyName_ru_W = TearOff.CurrencyName_ru;
					}
					return _CurrencyName_ru_W;
				}
			}

			public WhereParameter Keywords_uk
		    {
				get
		        {
					if(_Keywords_uk_W == null)
	        	    {
						_Keywords_uk_W = TearOff.Keywords_uk;
					}
					return _Keywords_uk_W;
				}
			}

			public WhereParameter Keywords_en
		    {
				get
		        {
					if(_Keywords_en_W == null)
	        	    {
						_Keywords_en_W = TearOff.Keywords_en;
					}
					return _Keywords_en_W;
				}
			}

			public WhereParameter Keywords_ru
		    {
				get
		        {
					if(_Keywords_ru_W == null)
	        	    {
						_Keywords_ru_W = TearOff.Keywords_ru;
					}
					return _Keywords_ru_W;
				}
			}

			public WhereParameter Active
		    {
				get
		        {
					if(_Active_W == null)
	        	    {
						_Active_W = TearOff.Active;
					}
					return _Active_W;
				}
			}

			public WhereParameter CapitalID
		    {
				get
		        {
					if(_CapitalID_W == null)
	        	    {
						_CapitalID_W = TearOff.CapitalID;
					}
					return _CapitalID_W;
				}
			}

			public WhereParameter Description_uk
		    {
				get
		        {
					if(_Description_uk_W == null)
	        	    {
						_Description_uk_W = TearOff.Description_uk;
					}
					return _Description_uk_W;
				}
			}

			public WhereParameter Description_en
		    {
				get
		        {
					if(_Description_en_W == null)
	        	    {
						_Description_en_W = TearOff.Description_en;
					}
					return _Description_en_W;
				}
			}

			public WhereParameter Description_ru
		    {
				get
		        {
					if(_Description_ru_W == null)
	        	    {
						_Description_ru_W = TearOff.Description_ru;
					}
					return _Description_ru_W;
				}
			}

			public WhereParameter DateUpdate
		    {
				get
		        {
					if(_DateUpdate_W == null)
	        	    {
						_DateUpdate_W = TearOff.DateUpdate;
					}
					return _DateUpdate_W;
				}
			}

			private WhereParameter _CountryID_W = null;
			private WhereParameter _Name_uk_W = null;
			private WhereParameter _Name_en_W = null;
			private WhereParameter _Name_ru_W = null;
			private WhereParameter _Content_uk_W = null;
			private WhereParameter _Content_en_W = null;
			private WhereParameter _Content_ru_W = null;
			private WhereParameter _Area_W = null;
			private WhereParameter _Population_W = null;
			private WhereParameter _CurrencyCode_W = null;
			private WhereParameter _CurrencyName_uk_W = null;
			private WhereParameter _CurrencyName_en_W = null;
			private WhereParameter _CurrencyName_ru_W = null;
			private WhereParameter _Keywords_uk_W = null;
			private WhereParameter _Keywords_en_W = null;
			private WhereParameter _Keywords_ru_W = null;
			private WhereParameter _Active_W = null;
			private WhereParameter _CapitalID_W = null;
			private WhereParameter _Description_uk_W = null;
			private WhereParameter _Description_en_W = null;
			private WhereParameter _Description_ru_W = null;
			private WhereParameter _DateUpdate_W = null;

			public void WhereClauseReset()
			{
				_CountryID_W = null;
				_Name_uk_W = null;
				_Name_en_W = null;
				_Name_ru_W = null;
				_Content_uk_W = null;
				_Content_en_W = null;
				_Content_ru_W = null;
				_Area_W = null;
				_Population_W = null;
				_CurrencyCode_W = null;
				_CurrencyName_uk_W = null;
				_CurrencyName_en_W = null;
				_CurrencyName_ru_W = null;
				_Keywords_uk_W = null;
				_Keywords_en_W = null;
				_Keywords_ru_W = null;
				_Active_W = null;
				_CapitalID_W = null;
				_Description_uk_W = null;
				_Description_en_W = null;
				_Description_ru_W = null;
				_DateUpdate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CountryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name_uk
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name_uk, Parameters.Name_uk);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name_en, Parameters.Name_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name_ru, Parameters.Name_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Content_uk
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Content_uk, Parameters.Content_uk);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Content_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Content_en, Parameters.Content_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Content_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Content_ru, Parameters.Content_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Area
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Area, Parameters.Area);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Population
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Population, Parameters.Population);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrencyCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrencyCode, Parameters.CurrencyCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrencyName_uk
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrencyName_uk, Parameters.CurrencyName_uk);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrencyName_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrencyName_en, Parameters.CurrencyName_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrencyName_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrencyName_ru, Parameters.CurrencyName_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Keywords_uk
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Keywords_uk, Parameters.Keywords_uk);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Keywords_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Keywords_en, Parameters.Keywords_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Keywords_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Keywords_ru, Parameters.Keywords_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Active
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Active, Parameters.Active);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CapitalID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CapitalID, Parameters.CapitalID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description_uk
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description_uk, Parameters.Description_uk);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description_en
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description_en, Parameters.Description_en);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description_ru
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description_ru, Parameters.Description_ru);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateUpdate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateUpdate, Parameters.DateUpdate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public AggregateParameter Name_uk
		    {
				get
		        {
					if(_Name_uk_W == null)
	        	    {
						_Name_uk_W = TearOff.Name_uk;
					}
					return _Name_uk_W;
				}
			}

			public AggregateParameter Name_en
		    {
				get
		        {
					if(_Name_en_W == null)
	        	    {
						_Name_en_W = TearOff.Name_en;
					}
					return _Name_en_W;
				}
			}

			public AggregateParameter Name_ru
		    {
				get
		        {
					if(_Name_ru_W == null)
	        	    {
						_Name_ru_W = TearOff.Name_ru;
					}
					return _Name_ru_W;
				}
			}

			public AggregateParameter Content_uk
		    {
				get
		        {
					if(_Content_uk_W == null)
	        	    {
						_Content_uk_W = TearOff.Content_uk;
					}
					return _Content_uk_W;
				}
			}

			public AggregateParameter Content_en
		    {
				get
		        {
					if(_Content_en_W == null)
	        	    {
						_Content_en_W = TearOff.Content_en;
					}
					return _Content_en_W;
				}
			}

			public AggregateParameter Content_ru
		    {
				get
		        {
					if(_Content_ru_W == null)
	        	    {
						_Content_ru_W = TearOff.Content_ru;
					}
					return _Content_ru_W;
				}
			}

			public AggregateParameter Area
		    {
				get
		        {
					if(_Area_W == null)
	        	    {
						_Area_W = TearOff.Area;
					}
					return _Area_W;
				}
			}

			public AggregateParameter Population
		    {
				get
		        {
					if(_Population_W == null)
	        	    {
						_Population_W = TearOff.Population;
					}
					return _Population_W;
				}
			}

			public AggregateParameter CurrencyCode
		    {
				get
		        {
					if(_CurrencyCode_W == null)
	        	    {
						_CurrencyCode_W = TearOff.CurrencyCode;
					}
					return _CurrencyCode_W;
				}
			}

			public AggregateParameter CurrencyName_uk
		    {
				get
		        {
					if(_CurrencyName_uk_W == null)
	        	    {
						_CurrencyName_uk_W = TearOff.CurrencyName_uk;
					}
					return _CurrencyName_uk_W;
				}
			}

			public AggregateParameter CurrencyName_en
		    {
				get
		        {
					if(_CurrencyName_en_W == null)
	        	    {
						_CurrencyName_en_W = TearOff.CurrencyName_en;
					}
					return _CurrencyName_en_W;
				}
			}

			public AggregateParameter CurrencyName_ru
		    {
				get
		        {
					if(_CurrencyName_ru_W == null)
	        	    {
						_CurrencyName_ru_W = TearOff.CurrencyName_ru;
					}
					return _CurrencyName_ru_W;
				}
			}

			public AggregateParameter Keywords_uk
		    {
				get
		        {
					if(_Keywords_uk_W == null)
	        	    {
						_Keywords_uk_W = TearOff.Keywords_uk;
					}
					return _Keywords_uk_W;
				}
			}

			public AggregateParameter Keywords_en
		    {
				get
		        {
					if(_Keywords_en_W == null)
	        	    {
						_Keywords_en_W = TearOff.Keywords_en;
					}
					return _Keywords_en_W;
				}
			}

			public AggregateParameter Keywords_ru
		    {
				get
		        {
					if(_Keywords_ru_W == null)
	        	    {
						_Keywords_ru_W = TearOff.Keywords_ru;
					}
					return _Keywords_ru_W;
				}
			}

			public AggregateParameter Active
		    {
				get
		        {
					if(_Active_W == null)
	        	    {
						_Active_W = TearOff.Active;
					}
					return _Active_W;
				}
			}

			public AggregateParameter CapitalID
		    {
				get
		        {
					if(_CapitalID_W == null)
	        	    {
						_CapitalID_W = TearOff.CapitalID;
					}
					return _CapitalID_W;
				}
			}

			public AggregateParameter Description_uk
		    {
				get
		        {
					if(_Description_uk_W == null)
	        	    {
						_Description_uk_W = TearOff.Description_uk;
					}
					return _Description_uk_W;
				}
			}

			public AggregateParameter Description_en
		    {
				get
		        {
					if(_Description_en_W == null)
	        	    {
						_Description_en_W = TearOff.Description_en;
					}
					return _Description_en_W;
				}
			}

			public AggregateParameter Description_ru
		    {
				get
		        {
					if(_Description_ru_W == null)
	        	    {
						_Description_ru_W = TearOff.Description_ru;
					}
					return _Description_ru_W;
				}
			}

			public AggregateParameter DateUpdate
		    {
				get
		        {
					if(_DateUpdate_W == null)
	        	    {
						_DateUpdate_W = TearOff.DateUpdate;
					}
					return _DateUpdate_W;
				}
			}

			private AggregateParameter _CountryID_W = null;
			private AggregateParameter _Name_uk_W = null;
			private AggregateParameter _Name_en_W = null;
			private AggregateParameter _Name_ru_W = null;
			private AggregateParameter _Content_uk_W = null;
			private AggregateParameter _Content_en_W = null;
			private AggregateParameter _Content_ru_W = null;
			private AggregateParameter _Area_W = null;
			private AggregateParameter _Population_W = null;
			private AggregateParameter _CurrencyCode_W = null;
			private AggregateParameter _CurrencyName_uk_W = null;
			private AggregateParameter _CurrencyName_en_W = null;
			private AggregateParameter _CurrencyName_ru_W = null;
			private AggregateParameter _Keywords_uk_W = null;
			private AggregateParameter _Keywords_en_W = null;
			private AggregateParameter _Keywords_ru_W = null;
			private AggregateParameter _Active_W = null;
			private AggregateParameter _CapitalID_W = null;
			private AggregateParameter _Description_uk_W = null;
			private AggregateParameter _Description_en_W = null;
			private AggregateParameter _Description_ru_W = null;
			private AggregateParameter _DateUpdate_W = null;

			public void AggregateClauseReset()
			{
				_CountryID_W = null;
				_Name_uk_W = null;
				_Name_en_W = null;
				_Name_ru_W = null;
				_Content_uk_W = null;
				_Content_en_W = null;
				_Content_ru_W = null;
				_Area_W = null;
				_Population_W = null;
				_CurrencyCode_W = null;
				_CurrencyName_uk_W = null;
				_CurrencyName_en_W = null;
				_CurrencyName_ru_W = null;
				_Keywords_uk_W = null;
				_Keywords_en_W = null;
				_Keywords_ru_W = null;
				_Active_W = null;
				_CapitalID_W = null;
				_Description_uk_W = null;
				_Description_en_W = null;
				_Description_ru_W = null;
				_DateUpdate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertCountry]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.CountryID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateCountry]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteCountry]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.CountryID);
			p.SourceColumn = ColumnNames.CountryID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.CountryID);
			p.SourceColumn = ColumnNames.CountryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name_uk);
			p.SourceColumn = ColumnNames.Name_uk;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name_en);
			p.SourceColumn = ColumnNames.Name_en;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name_ru);
			p.SourceColumn = ColumnNames.Name_ru;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Content_uk);
			p.SourceColumn = ColumnNames.Content_uk;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Content_en);
			p.SourceColumn = ColumnNames.Content_en;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Content_ru);
			p.SourceColumn = ColumnNames.Content_ru;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Area);
			p.SourceColumn = ColumnNames.Area;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Population);
			p.SourceColumn = ColumnNames.Population;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrencyCode);
			p.SourceColumn = ColumnNames.CurrencyCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrencyName_uk);
			p.SourceColumn = ColumnNames.CurrencyName_uk;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrencyName_en);
			p.SourceColumn = ColumnNames.CurrencyName_en;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrencyName_ru);
			p.SourceColumn = ColumnNames.CurrencyName_ru;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Keywords_uk);
			p.SourceColumn = ColumnNames.Keywords_uk;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Keywords_en);
			p.SourceColumn = ColumnNames.Keywords_en;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Keywords_ru);
			p.SourceColumn = ColumnNames.Keywords_ru;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Active);
			p.SourceColumn = ColumnNames.Active;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CapitalID);
			p.SourceColumn = ColumnNames.CapitalID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description_uk);
			p.SourceColumn = ColumnNames.Description_uk;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description_en);
			p.SourceColumn = ColumnNames.Description_en;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description_ru);
			p.SourceColumn = ColumnNames.Description_ru;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateUpdate);
			p.SourceColumn = ColumnNames.DateUpdate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
